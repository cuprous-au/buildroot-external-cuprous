# Copyright (C) 2025 Cuprous Pty Ltd

flush ruleset

define INTERNAL_BRIDGE = config-br0
define EXTERNAL_LINK = enP1p1s0
define EXTERNAL_WLAN_LINK = wlan0

table ip gateway {

    chain inbound_world {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # allow SSH connections temporarily during development
        tcp dport ssh accept
    }

    chain inbound_private {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # Allow DHCP clients
        udp dport 67 accept

        # allow http access to the configurator
        tcp dport 8080 accept

        # allow SSH connections temporarily during development
        tcp dport ssh accept
    }

    chain inbound {
        type filter hook input priority filter; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname lo accept
        iifname { $EXTERNAL_LINK, $EXTERNAL_WLAN_LINK }  jump inbound_world
        iifname $INTERNAL_BRIDGE jump inbound_private


        # the rest is dropped by the above policy
    }

    chain forward_private {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # intended for containers to offer services to the outside world
        tcp dport 80 accept
    }

    chain forward {
        type filter hook forward priority filter; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # happy to forward any traffic to the internet via the external links
        oifname { $EXTERNAL_LINK, $EXTERNAL_WLAN_LINK } accept

        # connections from the internal bridge to other internal interface (ie containers)
        iifname $INTERNAL_BRIDGE jump forward_private

        # the rest is dropped by the above policy
    }

    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # masquerade private IP addresses
        oifname { $EXTERNAL_LINK, $EXTERNAL_WLAN_LINK } masquerade
    }
}

table ip6 gateway {
    chain inbound_containers {
        # accepting ping (icmpv6 echo-request) for diagnostic purposes.
        icmpv6 type echo-request limit rate 5/second accept

        # allow containers to reach the configurator
        tcp dport 8080 accept
    }

    chain inbound {
        type filter hook input priority filter; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # allow loopback traffic
        iifname lo accept

        # allow traffic from containers and not the external links or internal bridge
        iifname != { $EXTERNAL_LINK, $EXTERNAL_WLAN_LINK, $INTERNAL_BRIDGE } jump inbound_containers

        # the rest is dropped by the above policy

    }

    chain forward {
        type filter hook forward priority filter; policy drop;
        # not forwarding any IPv6 traffic for now
    }
}
